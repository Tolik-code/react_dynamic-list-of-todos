{"version":3,"sources":["components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","listTodos","props","todos","filterValue","filterStateTodos","handleChange","target","setState","name","value","this","selectedUserId","getSelectedUserId","currentListTodos","filter","elem","completed","item","title","toLowerCase","includes","className","onChange","type","onClick","j","temp","copyArr","i","length","Math","floor","random","map","todo","userId","key","id","checked","readOnly","React","Component","defaultProps","url","a","fetch","then","response","json","list","getUserInfoApi","CurrentUser","user","getUser","data","userFromApi","clearSelectedUser","email","phone","App","getTodosApi","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6f86d50a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types'; \nimport './TodoList.scss';\n\nexport class TodoList extends React.Component {\n  state = {\n    listTodos: [...this.props.todos],\n    filterValue: '',\n    filterStateTodos: 'all',\n  }\n\n  handleChange = ({ target }) => {\n    this.setState({\n      [target.name]: target.value,\n    });\n  };\n\n  render() {\n    const { selectedUserId, getSelectedUserId } = this.props;\n    const { filterValue, listTodos, filterStateTodos } = this.state;\n    const currentListTodos = [...this.state.listTodos].filter((elem) => {\n      if (filterStateTodos === 'completed') {\n        return elem.completed === true;\n      }\n\n      if (filterStateTodos === 'active') {\n        return elem.completed === false;\n      }\n\n      return true;\n    }).filter(item => (\n      `${item.title}`.toLowerCase()\n    ).includes(filterValue.toLowerCase()));\n\n    const shuffleRandom = () => {\n      let j,\n        temp;\n      const copyArr = [...listTodos];\n\n      for (let i = copyArr.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        temp = copyArr[j];\n        copyArr[j] = copyArr[i];\n        copyArr[i] = temp;\n      }\n\n      this.setState({\n        listTodos: copyArr,\n      });\n    };\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <form>\n          <input\n            name=\"filterValue\"\n            value={filterValue}\n            onChange={this.handleChange}\n          />\n          <button\n            type=\"button\"\n            onClick={shuffleRandom}\n          >\n            go random sort\n          </button>\n          <select\n            value={filterStateTodos}\n            name=\"filterStateTodos\"\n            onChange={this.handleChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </form>\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {currentListTodos.map(todo => (\n              <li\n                className={`TodoList__item ${todo.userId === selectedUserId\n                  ? 'TodoList__item--checked'\n                  : 'TodoList__item--unchecked'}`}\n                key={todo.id}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    readOnly=\"readonly\"\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\n                  \"\n                  type=\"button\"\n                  onClick={() => getSelectedUserId(todo.userId)}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string,\n    id: PropTypes.number,\n    userId: PropTypes.number,\n    completed: PropTypes.bool,\n  })),\n  getSelectedUserId: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n};\n\nTodoList.defaultProps = {\n  todos: null,\n};\n","const url = 'https://mate-api.herokuapp.com';\n\nexport async function getTodosApi() {\n  const list = await fetch(`${url}/todos`)\n    .then(response => response.json());\n\n  return list;\n}\n\nexport async function getUserInfoApi(userId) {\n  const list = await fetch(`${url}/users/${userId}`)\n    .then(response => response.json());\n\n  return list;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getUserInfoApi } from '../../api/api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n  }\n\n  componentDidMount() {\n    this.getUser();\n  }\n\n  componentDidUpdate({ userId: prevUserId }) {\n    const { userId } = this.props;\n\n    if (prevUserId !== userId) {\n      this.getUser();\n    }\n  }\n\n  getUser = () => {\n    getUserInfoApi(this.props.userId)\n      .then(response => response.data)\n      .then(userFromApi => (\n        this.setState({\n          user: userFromApi,\n        })\n      ));\n  };\n\n  render() {\n    const { user } = this.state;\n    const { clearSelectedUser } = this.props;\n\n    if (!user) {\n      return (\n        <>\n          <h3>No info :(</h3>\n          <button\n            type=\"button\"\n            onClick={clearSelectedUser}\n          >\n            clear celected user :)\n          </button>\n        </>\n      );\n    }\n\n    const { id, email, phone, name } = user;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n        <button\n          type=\"button\"\n          onClick={clearSelectedUser}\n        >\n          clear celected user :)\n        </button>\n      </div>\n    );\n  }\n};\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearSelectedUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodosApi } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: null,\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodosApi().then(response => (\n      this.setState({\n        todos: response.data,\n      })\n    ));\n  }\n\n  getSelectedUserId = (userId) => {\n    const { selectedUserId } = this.state;\n\n    if (selectedUserId === userId) {\n      return;\n    }\n\n    this.setState({\n      selectedUserId: userId,\n    });\n  }\n\n  clearSelectedUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  };\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {todos ? (\n            <TodoList\n              todos={todos}\n              getSelectedUserId={this.getSelectedUserId}\n              selectedUserId={selectedUserId}\n            />\n          ) : (\n            <h2>no todos</h2>\n          )}\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearSelectedUser={this.clearSelectedUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}