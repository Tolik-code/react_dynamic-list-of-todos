{"version":3,"sources":["components/TodoList/TodoList.jsx","api/api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","listTodos","props","todos","filterList","filterValue","filterStateTodos","handleChange","target","setState","name","value","shuffleRandom","j","temp","copyArr","i","length","Math","floor","random","prevProps","prevState","this","newList","filter","elem","completed","item","title","includes","selectedUserId","getSelectedUserId","currentListTodos","className","onChange","type","onClick","map","todo","userId","key","id","checked","readOnly","React","Component","defaultProps","url","a","fetch","then","response","json","list","getUserInfoApi","CurrentUser","user","getUser","data","userFromApi","clearSelectedUser","email","phone","App","getTodosApi","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f0c2e06d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types'; \nimport './TodoList.scss';\n\nexport class TodoList extends React.Component {\n  state = {\n    listTodos: [...this.props.todos],\n    filterList: [...this.props.todos],\n    filterValue: '',\n    filterStateTodos: 'all',\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { filterStateTodos, filterValue } = this.state;\n\n    if (prevState.filterStateTodos !== filterStateTodos\n      || prevState.filterValue !== filterValue) {\n      const newList = [...this.state.listTodos].filter((elem) => {\n        if (filterStateTodos === 'completed') {\n          return elem.completed === true;\n        }\n\n        if (filterStateTodos === 'active') {\n          return elem.completed === false;\n        }\n\n        return true;\n      }).filter(item => (`${item.title}`).includes(filterValue));\n\n      this.setState({\n        filterList: newList,\n      });\n    }\n  }\n\n  handleChange = ({ target }) => {\n    this.setState({\n      [target.name]: target.value,\n    });\n  };\n\n  shuffleRandom = () => {\n    let j,\n      temp;\n    const copyArr = [...this.state.filterList];\n\n    for (let i = copyArr.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      temp = copyArr[j];\n      copyArr[j] = copyArr[i];\n      copyArr[i] = temp;\n    }\n\n    this.setState({\n      filterList: copyArr,\n    });\n  };\n\n  render() {\n    const { selectedUserId, getSelectedUserId } = this.props;\n    const { filterValue, filterList, filterStateTodos } = this.state;\n    const currentListTodos = filterList;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <form>\n          <input\n            name=\"filterValue\"\n            value={filterValue}\n            onChange={this.handleChange}\n          />\n          <button\n            type=\"button\"\n            onClick={this.shuffleRandom}\n          >\n            go random sort\n          </button>\n          <select\n            value={filterStateTodos}\n            name=\"filterStateTodos\"\n            onChange={this.handleChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </form>\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {currentListTodos.map(todo => (\n              <li\n                className={`TodoList__item ${todo.userId === selectedUserId\n                  ? 'TodoList__item--checked'\n                  : 'TodoList__item--unchecked'}`}\n                key={todo.id}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    readOnly=\"readonly\"\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\n                  \"\n                  type=\"button\"\n                  onClick={() => getSelectedUserId(todo.userId)}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string,\n    id: PropTypes.number,\n    userId: PropTypes.number,\n    completed: PropTypes.bool,\n  })),\n  getSelectedUserId: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n};\n\nTodoList.defaultProps = {\n  todos: null,\n};\n","// eslint-disable-next-line\nconst url = 'https://mate-api.herokuapp.com';\n\nexport async function getTodosApi() {\n  const list = await fetch(`${url}/todos`)\n    .then(response => response.json());\n\n  return list;\n}\n\nexport async function getUserInfoApi(userId) {\n  const list = await fetch(`${url}/users/${userId}`)\n    .then(response => response.json());\n\n  return list;\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { getUserInfoApi } from '../../api/api';\nimport './CurrentUser.scss';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    user: null,\n  }\n\n  componentDidMount() {\n    this.getUser();\n  }\n\n  componentDidUpdate({ userId }) {\n    if (userId !== this.props.userId) {\n      this.getUser();\n    }\n  }\n\n  getUser = () => {\n    getUserInfoApi(this.props.userId)\n      .then(response => response.data)\n      .then(userFromApi => (\n        this.setState({\n          user: userFromApi,\n        })\n      ));\n  };\n\n  render() {\n    const { user } = this.state;\n    const { clearSelectedUser } = this.props;\n\n    if (!user) {\n      return (\n        <>\n          <h3>No info :(</h3>\n          <button\n            type=\"button\"\n            onClick={clearSelectedUser}\n          >\n            clear celected user :)\n          </button>\n        </>\n      );\n    }\n\n    const { id, email, phone, name } = user;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{name}</h3>\n        <p className=\"CurrentUser__email\">{email}</p>\n        <p className=\"CurrentUser__phone\">{phone}</p>\n        <button\n          type=\"button\"\n          onClick={clearSelectedUser}\n        >\n          clear celected user :)\n        </button>\n      </div>\n    );\n  }\n};\n\nCurrentUser.propTypes = {\n  userId: PropTypes.number.isRequired,\n  clearSelectedUser: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodosApi } from './api/api';\n\nclass App extends React.Component {\n  state = {\n    todos: null,\n    selectedUserId: 0,\n  };\n\n  componentDidMount() {\n    getTodosApi().then(response => (\n      this.setState({\n        todos: response.data,\n      })\n    ));\n  }\n\n  getSelectedUserId = (userId) => {\n    if (this.state.selectedUserId === userId) {\n      return;\n    }\n\n    this.setState({\n      selectedUserId: userId,\n    });\n  }\n\n  clearSelectedUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  };\n\n  render() {\n    const { todos, selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {todos ? (\n            <TodoList\n              todos={todos}\n              getSelectedUserId={this.getSelectedUserId}\n              selectedUserId={selectedUserId}\n            />\n          ) : (\n            <h2>no todos</h2>\n          )}\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearSelectedUser={this.clearSelectedUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}